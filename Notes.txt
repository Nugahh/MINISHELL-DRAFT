

|  HOW TO USE GIT |

1 - Master branch
2 - Use new branches for each new feature and then merge onto the master once finished
		Create: git co -b "branchname"
		Check them: git branch
		inspect changes: git log
		/!\ need to still add + commit + push for them to upload online
		afterpush, go on GitHub, "Pull request" > "send Pull request"

|  MINISHELL SUBJECT  |

prompt, working history, search and launch exec from PATH, 1 global variable only, quotes, redirections
pipes, env var, $?, ctrl + C - D - \ , echo -n, cd, pwd, export, unset, env, exit

allowed functions: readline, rl_clear_history, rl_on_new_line,
rl_replace_line, rl_redisplay, add_history,
printf, malloc, free, write, access, open, read,
close, fork, wait, waitpid, wait3, wait4, signal,
sigaction, sigemptyset, sigaddset, kill, exit,
getcwd, chdir, stat, lstat, fstat, unlink, execve,
dup, dup2, pipe, opendir, readdir, closedir,
strerror, perror, isatty, ttyname, ttyslot, ioctl,
getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
tgetnum, tgetstr, tgoto, tputs

| TUTO |

variable globale: pour la gestion d'erreur (mettre code d'erreur)

[PARSING]

>> MAIN

>> SPLIT
	- int status
		0: no quote
		1: single quote
		2: double quote
		(if state 2 is not finished, return error command)
	- first split: operateurs + espace
	- liste token (mettre resultat du split dans chaque maillon, et lui donner son type si jamais "cat" = word, | = pipe)
	t_token 
	{
		char *value;
		int type;( < << > >> | espace WORD FD LIM)
		t_token *next;
	}
	- ENUM ( < << > >> | et espace)
		typedef ENUM
		{
			DEFAULT,
			SINGLE,
			DOUBLE
		}

>> syntax error

>> EXPANSION ($ ""): aller chercher ma variable
	- quoting rules
	- status
		0: no quote => $
		1: single quote => remove quote + magic space 
											space * -1 (-32)
		2: double quote => remove quote
							$ (stop at special char, only _ is valid for env var)
							magic space

>> SPLIT 32

>> STRUCT pour exec
	t_cmd
	{
		t_token *ARG;
		t_token *RED;
		intfd_in;
		intfd_out;
		t_cmd *next;
	}
	si on croise une pipe, nouvelle structure pcq deuxieme commande a exec

[EXEC]

Heredoc first
While ()
	pipe 
	redirection (fd_in / fd_out)
	transfo pour utiliser execve (terminer tableau avec null)
	close les fds

>>> SIGNAUX
3 modes differents: 1 pour debut de l'exec, 1 dans l'enfant, 1 apres 	

| PLAN - PROTO |

int main (int ac, char **av);

char **split (char *str, char c);
enregistrer l'entree en char * => char *getcommand (char **av);
void initlist(t_token token, char *command);
void initstruct(t_token *token, t_cmd *command);
int *get_state(char *command);
void split_state(char *command, int *state, t_token **token);
void define_type(t_token **token);

int	error_handler(t_token **token);

void expand_node(t_token **token);
void double_expand(t_token **token);
void single_expand(t_token **token);
void dollar_expand(t_token **token);




